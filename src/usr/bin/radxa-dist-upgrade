#!/usr/bin/env bash
set -e

set -euo pipefail
shopt -s nullglob

DEBUG="${DEBUG:-false}"

SCRIPT_DIR="$(dirname "$(realpath "$0")")"
if [[ -f "$SCRIPT_DIR/../src/lib/librtui/tui.sh" ]]; then
    # shellcheck source=externals/librtui/src/lib/librtui/tui.sh
    source "$SCRIPT_DIR/../src/lib/librtui/tui.sh"
else
    # shellcheck source=externals/librtui/src/lib/librtui/tui.sh
    source "/usr/lib/librtui/tui.sh"
fi

# shellcheck source=src/usr/lib/radxa-dist-upgrade/bullseye.sh
source "/usr/lib/radxa-dist-upgrade/$(lsb_release -c | awk -F'\t' '{print $2}').sh"

export STEP="0"
export FLAG="1"
SBC="$(tr $"\0" $"\n" < /proc/device-tree/compatible | head -n 1 | cut -d "," -f 2)"
export SBC
SOC="$(curl "https://gate.radxa.com/https://raw.githubusercontent.com/RadxaOS-SDK/rsdk/main/src/share/rsdk/configs/products.json" | yq -e ".[] | select(.product == \"$SBC\").soc" | tr -d '\"')"
export SOC

main() {
    menu_init
    menu_add checks "Check for upgrade"
    menu_add setup_source_list "Setup source list"
    menu_add pre_system_upgrade "Pre system upgrade"
    menu_add system_upgrade "System upgrade"
    menu_add post_system_upgrade "Post system upgrade"
    menu_show "Please select an operation below:"
}



check_packages() {
    local product package
    product="$(tr $"\0" $"\n" < /proc/device-tree/compatible | tail -n 2 | head -n 1 | cut -d "," -f 2)"
    package="task-$product"

    if [[ "$(dpkg --get-selections "$package" | awk '{print $2}')" == "install" ]]
    then
        echo "$package is installed."
    else
        if yesno "$package is not installed. Do you want to install it?"
        then
            echo "Installing $package"
            if apt-get install -y "$package"
            then
                echo "$package installed."
            else
                echo "Failed to install $package."
                return 1
            fi
        else
            echo "Skipping $package installation."
            return 1
        fi
    fi
}

check_system_upgrade() {
    apt-get update
    upgradable="$(apt-get -s upgrade)"

    if echo "$upgradable" | grep -q "0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded"; then
        echo "All packages are up to date."
    else
        if yesno "Some packages are not up to date, please upgrade first"
        then
            system_upgrade
        fi
    fi
}

check_dkms_status() {
    if [[ "$(dkms status | awk '{print $5}' | grep -v installed)" == "" ]]
    then
        echo "DKMS is ready."
    else
        echo "Some dkms modules are not installed, please check "dkms status""
        return 1
    fi
}

tui_start main "radxa-dist-upgrade"
